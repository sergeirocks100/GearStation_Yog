var TMPL = (function(){return { _generic:function anonymous(data, config, helper
/**/) {
var out='<div id=\'content\'><div id=\'loading\'>Initiating...</div></div>';return out;
},
  _nanotrasen:function anonymous(data, config, helper
/**/) {
var out='<div id=\'title\' unselectable=\'on\'><div id=\'statusicon\' class=\'good\' unselectable="on"></div><div id=\'titletext\' unselectable=\'on\'>'+(config.title)+'</div><div id=\'titlelogo\' unselectable=\'on\'></div></div><div id=\'content\' unselectable=\'on\'><div id=\'loading\'>Initiating...</div></div>';return out;
},
  air_alarm:function anonymous(data, config, helper
/**/) {
var out='<div class="notice">';if(data.siliconUser){out+='<div class="itemContentSmall">Interface Lock:</div><div class="itemContentFull">'+(helper.link('Engaged', 'locked', {'toggleaccess': 1}, data.locked ? 'selected' : null))+(helper.link('Disengaged', 'unlocked', {'toggleaccess': 1}, data.locked ? null : 'selected'))+'</div><div class="clearBoth"></div>';}else{if(data.locked){out+='Swipe an ID card to unlock this interface.';}else{out+='Swipe an ID card to lock this interface.';}}out+='</div><h2>Air Status</h2><div class="statusDisplay">';if(data.environment_data){var arr1=data.environment_data;if(arr1){var info,i=-1,l1=arr1.length-1;while(i<l1){info=arr1[i+=1];out+='<div class="item"><div class="itemLabel">'+(info.name)+':</div><div class="itemContent">';if(info.danger_level == 2){out+='<span class=\'bad\'>';}else if(info.danger_level == 1){out+='<span class=\'average\'>';}else{out+='<span class=\'good\'>';}out+=''+(helper.fixed(info.value, 2))+'</span>'+(info.unit)+'</div></div>';} } out+='<div class="item"><div class="itemLabel">Local Status:</div><div class="itemContent">';if(data.danger_level == 2){out+='<span class=\'bad bold\'>Danger (Internals Required)</span>';}else if(data.danger_level == 1){out+='<span class=\'average bold\'>Caution</span>';}else{out+='<span class=\'good\'>Optimal</span>';}out+='</div></div><div class="item"><div class="itemLabel">Area Status:</div><div class="itemContent">';if(data.atmos_alarm){out+='<span class=\'bad bold\'>Atmosphere Alarm</span>';}else if(data.fire_alarm){out+='<span class=\'bad bold\'>Fire Alarm</span>';}else{out+='<span class=\'good\'>Nominal</span>';}out+='</div></div>';}else{out+='<div class="item"><span class=\'bad bold\'>Warning: Cannot obtain air sample for analysis.</span></div>';}if(data.dangerous){out+='<hr /><div class="item"><span class=\'bad bold\'>Warning: Safety measures offline. Device may exhibit abnormal behavior.</span></div>';}out+='</div>';if((!data.locked || data.siliconUser)){if(data.screen != 1){out+='<div class="item">'+(helper.link('Back', 'arrow-left', {'screen': 1}))+'</div>';}if(data.screen == 1){out+='<h2>Air Controls</h2><div class="statusDisplay"><div class="item">';if(!data.atmos_alarm){out+=''+(helper.link('Area Atmospheric Alarm', 'hand-stop-o', {'atmos_alarm': 1}));}else{out+=''+(helper.link('Area Atmospheric Alarm', 'close', {'atmos_reset': 1}, null, 'caution'));}out+='</div><div class="item">';if(data.mode != 3){out+=''+(helper.link('Panic Siphon', 'exclamation', {'mode': 3}));}else{out+=''+(helper.link('Panic Siphon', 'close', {'mode': 1}, null, 'danger'));}out+='</div><br /><div class="item">'+(helper.link('Vent Controls', 'sign-out', {'screen': 2}))+'</div><div class="item">'+(helper.link('Scrubber Controls', 'filter', {'screen': 3}))+'</div><br /><div class="item">'+(helper.link('Set Environmental Mode', 'cog', {'screen': 4}))+'</div><div class="item">'+(helper.link('Set Alarm Threshold', 'bar-chart', {'screen': 5}))+'</div></div>';}else if(data.screen == 2){out+='<h2>Vent Controls</h2>';var arr2=data.vents;if(arr2){var vent,i=-1,l2=arr2.length-1;while(i<l2){vent=arr2[i+=1];out+='<h3>'+(vent.long_name)+'</h3><div class="statusDisplay"><div class="item"><div class="itemLabel">Power:</div><div class="itemContent">';if(vent.power){out+=''+(helper.link('On', 'power-off', {'id_tag': vent.id_tag, 'command': 'power', 'val': 0}, null, null));}else{out+=''+(helper.link('Off', 'close', {'id_tag': vent.id_tag, 'command': 'power', 'val': 1}, null, 'danger'));}out+='</div></div><div class="item"><div class="itemLabel">Mode:</div><div class="itemContent">';if(vent.direction == "sipho"){out+='<span class="bad">Siphoning</span>';}else{out+='<span class="good">Pressurizing</span>';}out+='</div></div><div class="item"><div class="itemLabel">Pressure Checks:</div><div class="itemContent">'+(helper.link('Internal', 'sign-in', {'id_tag': vent.id_tag, 'command': 'incheck', 'val': vent.checks}, null, vent.incheck ? 'selected' : null))+(helper.link('External', 'sign-out', {'id_tag': vent.id_tag, 'command': 'excheck', 'val': vent.checks}, null, vent.excheck ? 'selected' : null))+'</div></div><div class="item"><div class="itemLabel">Set Pressure:</div><div class="itemContent">'+(helper.link(helper.fixed(vent.external), 'pencil', {'id_tag': vent.id_tag, 'command': 'set_external_pressure'}))+(helper.link('Reset', 'refresh', { 'id_tag': vent.id_tag, 'command': 'reset_external_pressure'}, vent.default ? 'disabled' : null))+'</div></div></div>';} } if(!data.vents.length){out+='No vents connected.';}}else if(data.screen == 3){out+='<h2>Scrubber Controls</h2>';var arr3=data.scrubbers;if(arr3){var scrubber,i=-1,l3=arr3.length-1;while(i<l3){scrubber=arr3[i+=1];out+='<h3>'+(scrubber.long_name)+'</h3><div class="statusDisplay"><div class="item"><div class="itemLabel">Power:</div><div class="itemContent">';if(scrubber.power){out+=''+(helper.link('On', 'power-off', {'id_tag': scrubber.id_tag, 'command': 'power', 'val': 0}, null, null));}else{out+=''+(helper.link('Off', 'close', {'id_tag': scrubber.id_tag, 'command': 'power', 'val': 1}, null, 'danger'));}out+='</div></div><div class="item"><div class="itemLabel">Mode:</div><div class="itemContent">';if(scrubber.scrubbing){out+=''+(helper.link('Scrubbing', 'filter', {'id_tag': scrubber.id_tag, 'command': 'scrubbing', 'val': 0}, null, null));}else{out+=''+(helper.link('Siphoning', 'sign-in', {'id_tag': scrubber.id_tag, 'command': 'scrubbing', 'val': 1}, null, 'danger'));}out+='</div></div><div class="item"><div class="itemLabel">Range:</div><div class="itemContent">';if(scrubber.widenet){out+=''+(helper.link('Extended', 'expand', {'id_tag': scrubber.id_tag, 'command': 'widenet', 'val': 0}, null, 'caution'));}else{out+=''+(helper.link('Normal', 'compress', {'id_tag': scrubber.id_tag, 'command': 'widenet', 'val': 1}, null, null));}out+='</div></div><div class="item"><div class="itemLabel">Filters:</div><div class="itemContent">'+(helper.link("CO2", scrubber.filter_co2 ? 'check-square-o' : 'square-o', {'id_tag': scrubber.id_tag, 'command': "co2_scrub", 'val': scrubber.filter_co2 ? 0 : 1}, null, scrubber.filter_co2 ? 'selected' : null))+(helper.link("N2O", scrubber.filter_n2o ? 'check-square-o' : 'square-o', {'id_tag': scrubber.id_tag, 'command': "n2o_scrub", 'val': scrubber.filter_n2o ? 0 : 1}, null, scrubber.filter_n2o ? 'selected' : null))+(helper.link("Plasma", scrubber.filter_toxins ? 'check-square-o' : 'square-o', {'id_tag': scrubber.id_tag, 'command': "tox_scrub", 'val': scrubber.filter_toxins ? 0 : 1}, null, scrubber.filter_toxins ? 'selected' : null))+'</div></div></div>';} } if(!data.scrubbers.length){out+='No scrubbers connected.';}}else if(data.screen == 4){out+='<h2>Environmental Modes</h2><div class="statusDisplay">';var arr4=data.modes;if(arr4){var mode,i=-1,l4=arr4.length-1;while(i<l4){mode=arr4[i+=1];out+='<div class="item">'+(helper.link(mode.name, mode.selected ? 'check-square-o' : 'square-o', {'mode': mode.mode}, null, mode.selected ? (mode.danger ? 'danger' : 'selected') : null))+'</div>';} } out+='</div>';}else if(data.screen == 5){out+='<h2>Alarm Thresholds</h2><div class="statusDisplay"><table class="fixed"><tr><td></td><td><span class=\'bad\'>min2</span></td><td><span class=\'average\'>min1</span></td><td><span class=\'average\'>max1</span></td><td><span class=\'bad\'>max2</span></td></tr>';var arr5=data.thresholds;if(arr5){var threshold,i=-1,l5=arr5.length-1;while(i<l5){threshold=arr5[i+=1];out+='<tr><td>'+(threshold.name)+'</td>';var arr6=threshold.settings;if(arr6){var setting,j=-1,l6=arr6.length-1;while(j<l6){setting=arr6[j+=1];out+='<td>'+(helper.link(setting.selected >= 0 ? helper.round(setting.selected*100)/100 : "Off", null, {'command': 'set_threshold', 'env': setting.env, 'var': setting.val}))+'</td>';} } out+='</tr>';} } out+='<table></div>';}}return out;
},
  airlock_electronics:function anonymous(data, config, helper
/**/) {
var out='<div class="statusDisplay"><div class="item">'+(helper.link(data.oneAccess ? 'One Required' : 'All Required', data.oneAccess ? 'unlock' : 'lock', {'access': 'one'}))+(helper.link('Reset', 'refresh', {'access': 'clear'}))+'</div><div class="item"><table class="fixed"><tr>';var arr1=data.regions;if(arr1){var region,i=-1,l1=arr1.length-1;while(i<l1){region=arr1[i+=1];out+='<td><span class="highlight"><b>'+(region.name)+'</b></span></td>';} } out+='</tr><tr>';var arr2=data.regions;if(arr2){var region,i=-1,l2=arr2.length-1;while(i<l2){region=arr2[i+=1];out+='<td class="alignTop">';var arr3=region.accesses;if(arr3){var access,j=-1,l3=arr3.length-1;while(j<l3){access=arr3[j+=1];out+=''+(helper.link(access.name, access.req ? 'check-square-o' : 'square-o', {'access': access.id}, null, access.req ? 'selected' : null))+'<br class="clearBoth" />';} } out+='</td>';} } out+='</tr></table></div></div>';return out;
},
  apc:function anonymous(data, config, helper
/**/) {
var out='<div class="notice">';if(data.siliconUser){out+='<div class="itemContentSmall">Interface Lock:</div><div class="itemContentFull">'+(helper.link('Engaged', 'lock', {'toggleaccess' : 1}, data.locked ? 'selected' : null))+(helper.link('Disengaged', 'unlock', {'toggleaccess' : 1}, data.malfStatus >= 2 ? 'linkOff' : (data.locked ? null : 'selected')))+'</div><div class="clearBoth"></div>';}else{if(data.locked){out+='Swipe an ID card to unlock this interface.';}else{out+='Swipe an ID card to lock this interface.';}}out+='</div><h2>Power Status</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Main Breaker:</div><div class="itemContent">';if(data.locked && !data.siliconUser){if(data.isOperating){out+='<span class=\'good\'>On</span>';}else{out+='<span class=\'bad\'>Off</span>';}}else{out+=''+(helper.link('On', 'power-off', {'breaker' : 1}, data.isOperating ? 'selected' : null))+(helper.link('Off', 'close', {'breaker' : 1}, data.isOperating ? null : 'selected'));}out+='</div></div><div class="item"><div class="itemLabel">External Power:</div><div class="itemContent">';if(data.externalPower == 2){out+='<span class=\'good\'>Good</span>';}else if(data.externalPower == 1){out+='<span class=\'average\'>Low</span>';}else{out+='<span class=\'bad\'>None</span>';}out+='</div></div><div class="item"><div class="itemLabel">Power Cell:</div>';if(data.powerCellStatus != null){out+=''+(helper.bar(data.powerCellStatus, 0, 100, data.powerCellStatus >= 50 ? 'good' : data.powerCellStatus >= 25 ? 'average' : 'bad'))+'<div class="itemContent" style="width: 60px">'+(helper.round(data.powerCellStatus*10)/10)+'%</div>';}else{out+='<div class="itemContent"><span class=\'bad\'>Power cell removed.</span></div>';}out+='</div>';if(data.powerCellStatus != null){out+='<div class="item"><div class="itemLabel">Charge Mode:</div><div class="itemContent">';if(data.locked && !data.siliconUser){if(data.chargeMode){out+='<span class=\'bold good\'>Auto</span>';}else{out+='<span class=\'bold bad\'>Off</span>';}}else{out+=''+(helper.link('Auto', 'refresh', {'cmode' : 1}, data.chargeMode ? 'selected' : null))+(helper.link('Off', 'close', {'cmode' : 1}, data.chargeMode ? null : 'selected'));}out+='&nbsp;';if(data.chargingStatus > 1){out+='[<span class=\'bold good\'>Fully Charged</span>]';}else if(data.chargingStatus == 1){out+='[<span class=\'bold average\'>Charging</span>]';}else{out+='[<span class=\'bold bad\'>Not Charging</span>]';}out+='</div></div>';}out+='</div><h2>Power Channels</h2><div class="statusDisplay">';var arr1=data.powerChannels;if(arr1){var channel,i=-1,l1=arr1.length-1;while(i<l1){channel=arr1[i+=1];out+='<div class="item"><div class="itemLabel">'+(channel.title)+':</div><div class="itemContent" style="width: 70px; text-align: right; margin-right: 10px">'+(channel.powerLoad)+' W</div><div class="itemContent" style="width: 105px">';if(channel.status <= 1){out+='<span class=\'bold bad\'>Off</span>';}else if(channel.status >= 2){out+='<span class=\'bold good\'>On</span>';}out+='&nbsp;';if(channel.status == 1 || channel.status == 3){out+='[Auto]';}else{out+='[Manual]';}out+='</div>';if(!data.locked || data.siliconUser){out+='<div class="itemContentFull">'+(helper.link('Auto', 'refresh', channel.topicParams.auto, (channel.status == 1 || channel.status == 3) ? 'selected' : null))+(helper.link('On', 'power-off', channel.topicParams.on, (channel.status == 2) ? 'selected' : null))+(helper.link('Off', 'close', channel.topicParams.off, (channel.status == 0) ? 'selected' : null))+'</div>';}out+='</div>';} } out+='<div class="item" style="font-weight: bold"><div class="itemLabel">Total Load:</div><div class="itemContent" style="width: 70px; text-align: right">'+(data.totalLoad)+' W</div></div></div>';if(data.siliconUser){out+='<hr /><h2>System Overrides</h2><div class="statusDisplay"><div class="item">'+(helper.link('Overload Lighting Circuit', 'lightbulb', {'overload' : 1}))+'</div><div class="item">';if(data.malfStatus == 1){out+=''+(helper.link('Override Programming', 'script', {'malfhack' : 1}));}else if(data.malfStatus == 2){out+=''+(helper.link('Shunt Core Processes', 'arrowreturn-1-s', {'occupyapc' : 1}));}else if(data.malfStatus == 3){out+=''+(helper.link('Return to Main Core', 'arrowreturn-1-w', {'deoccupyapc' : 1}));}else if(data.malfStatus == 4){out+=''+(helper.link('Shunt Core Processes', 'arrowreturn-1-s', {'occupyapc' : 1}, 'linkOff'));}out+='</div></div>';}out+='<br /><div class="notice"><div class="itemContentSmall">Cover Lock:</div><div class="itemContentFull">';if(data.locked && !data.siliconUser){if(data.coverLocked){out+='<span class=\'good\'>Engaged</span>';}else{out+='<span class=\'bad\'>Disengaged</span>';}}else{out+=''+(helper.link('Engaged', 'lock', {'lock' : 1}, data.coverLocked ? 'selected' : null))+(helper.link('Disengaged', 'unlock', {'lock' : 1}, data.coverLocked ? null : 'selected'));}out+='</div><div class="clearBoth"></div></div>';return out;
},
  atmos_filter:function anonymous(data, config, helper
/**/) {
var out='<div class="item"><div class="itemLabel">Power:</div><div class="itemContent">'+(helper.link(data.on? 'On' : 'Off', data.on? 'power' : 'close', {'power' : 1}))+'</div></div><div class="item"><div class="itemLabel">Output Pressure:</div><div class="itemContent">'+(helper.link('Set', 'pencil', {'set_press' : 'set'}))+(helper.link('Max', 'plus', {'set_press' : 'max'}, data.set_pressure == data.max_pressure ? 'disabled' : null))+(data.set_pressure)+' kPa</div></div><div class="item"><div class="itemLabel">Filter:</div><div class="itemContent">'+(helper.link('Plasma', null, {'filterset' :  0}, (data.filter_type ==  0)? 'selected' : null))+(helper.link('O2', null, {'filterset' :  1}, (data.filter_type ==  1)? 'selected' : null))+(helper.link('N2', null, {'filterset' :  2}, (data.filter_type ==  2)? 'selected' : null))+(helper.link('CO2', null, {'filterset' :  3}, (data.filter_type ==  3)? 'selected' : null))+(helper.link('N2O', null, {'filterset' :  4}, (data.filter_type ==  4)? 'selected' : null))+(helper.link('Nothing', null, {'filterset' :  -1}, (data.filter_type ==  -1)? 'selected' : null))+'</div></div>';return out;
},
  atmos_mixer:function anonymous(data, config, helper
/**/) {
var out='<div class="item"><div class="itemLabel">Power:</div><div class="itemContent">'+(helper.link(data.on? 'On' : 'Off', data.on? 'power' : 'close', {'power' : 1}))+'</div></div><div class="item"><div class="itemLabel">Output Pressure:</div><div class="itemContent">'+(helper.link('Set', 'pencil', {'set_press' : 'set'}))+(helper.link('Max', 'plus', {'set_press' : 'max'}, data.set_pressure == data.max_pressure ? 'disabled' : null))+(data.set_pressure)+' kPa</div></div><div class="item"><div class="itemLabel">Node 1:</div><div class="itemContent">'+(helper.link('', 'seek-start', {'node1_c' : '-0.1'}, null))+(helper.link('', 'triangle-1-w', {'node1_c' : '-0.01'}, null))+(helper.link('', 'triangle-1-e', {'node1_c' : '0.01'}, null))+(helper.link('', 'seek-end', {'node1_c' : '0.1'}, null))+(data.node1_concentration)+'%</div></div><div class="item"><div class="itemLabel">Node 2:</div><div class="itemContent">'+(helper.link('', 'seek-start', {'node2_c' : '-0.1'}, null))+(helper.link('', 'triangle-1-w', {'node2_c' : '-0.01'}, null))+(helper.link('', 'triangle-1-e', {'node2_c' : '0.01'}, null))+(helper.link('', 'seek-end', {'node2_c' : '0.1'}, null))+(data.node2_concentration)+'%</div></div>';return out;
},
  atmos_pump:function anonymous(data, config, helper
/**/) {
var out='<div class="item"><div class="itemLabel">Power:</div><div class="itemContent">'+(helper.link(data.on? 'On' : 'Off', data.on? 'power' : 'close', {'power' : 1}))+'</div></div>';if(data.max_rate){out+='<div class="item"><div class="itemLabel">Transfer Rate:</div><div class="itemContent">'+(helper.link('Set', 'pencil', {'set_transfer_rate' : 'set'}))+(helper.link('Max', 'plus', {'set_transfer_rate' : 'max'}, data.transfer_rate == data.max_rate ? 'disabled' : null))+(data.transfer_rate)+' L/s</div></div>';}else{out+='<div class="item"><div class="itemLabel">Output Pressure:</div><div class="itemContent">'+(helper.link('Set', 'pencil', {'set_press' : 'set'}))+(helper.link('Max', 'plus', {'set_press' : 'max'}, data.set_pressure == data.max_pressure ? 'disabled' : null))+(data.set_pressure)+' kPa</div></div>';}return out;
},
  canister:function anonymous(data, config, helper
/**/) {
var out='';if(data.hasHoldingTank){out+='<div class="noticePlaceholder">The regulator is connected to a tank.</div>';}else{out+='<div class="notice">The regulator is not connected to a tank.</div>';}out+='<h2>Canister</h2><div class="item">'+(helper.link('Relabel', 'pencil', {'relabel' : 1}, data.canLabel ? null : 'disabled'))+'</div><div class="item"><div class="itemLabel">Pressure:</div><div class="itemContent">'+(data.tankPressure)+' kPa</div></div><div class="item"><div class="itemLabel">Port:</div><div class="itemContent">';if(data.portConnected){out+='<span class="good">Connected</span>';}else{out+='<span class="bad">Disconnected</span>';}out+='</div></div><h2>Valve</h2><div class="item"><div class="itemLabel">Release Pressure:</div><div class="itemContent">'+(helper.bar(data.releasePressure, data.minReleasePressure, data.maxReleasePressure))+(data.releasePressure)+' kPa</div></div><div class="item"><div class="itemLabel">Pressure Regulator:</div><div class="itemContent">'+(helper.link('Reset', 'refresh', {'release_p': 'reset'}, (data.releasePressure != data.defaultReleasePressure) ? null : 'disabled'))+(helper.link('Min', 'minus', {'release_p': 'min'}, (data.releasePressure > data.minReleasePressure) ? null : 'disabled'))+(helper.link('Set', 'pencil', {'release_p': 'custom'}, null))+(helper.link('Max', 'plus', {'release_p': 'max'}, (data.releasePressure < data.maxReleasePressure) ? null : 'disabled'))+'<br class="clearBoth" />'+(helper.link('Open', 'unlock', {'toggle' : 1}, data.valveOpen ? 'selected' : null))+(helper.link('Close', 'lock', {'toggle' : 1}, data.valveOpen ? null : 'selected'))+'</div></div><h2>Holding Tank</h2>';if(data.hasHoldingTank){out+=''+(helper.link('Eject', 'eject', {'remove_tank' : 1}))+'<div class="item"><div class="itemLabel">Label:</div><div class="itemContent">'+(data.holdingTank.name)+'</div></div><div class="item"><div class="itemLabel">Tank Pressure:</div><div class="itemContent">'+(data.holdingTank.tankPressure)+' kPa</div></div>';}else{out+='<div class="item"><span class="average">No Holding Tank</span></div>';}return out;
},
  chem_dispenser:function anonymous(data, config, helper
/**/) {
var out='<h2>Status</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Energy:</div><div class="itemContent">'+(helper.bar(data.energy, 0, data.maxEnergy, 'good'))+(data.energy)+' Units</div></div><div class="item"><div class="itemLabel">Amount:</div><div class="itemContent">';var arr1=data.beakerTransferAmounts;if(arr1){var amount,i=-1,l1=arr1.length-1;while(i<l1){amount=arr1[i+=1];out+=''+(helper.link(amount, 'plus', {'amount': amount}, (data.amount == amount) ? 'selected' : null));} } out+='</div></div></div><h2>Dispense</h2><div class="statusDisplay"><div class="item"><div class="itemContentWidest">';var arr2=data.chemicals;if(arr2){var chem,i=-1,l2=arr2.length-1;while(i<l2){chem=arr2[i+=1];out+=''+(helper.link(chem.title, 'tint', chem.commands, null, 'link fixedLeft'));} } out+='</div></div></div><h2>Beaker</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">'+(helper.link('Eject', 'eject', {'ejectBeaker' : 1}, data.isBeakerLoaded ? null : 'disabled'))+'</div><div class="itemContent">';var arr3=data.beakerTransferAmounts;if(arr3){var amount,i=-1,l3=arr3.length-1;while(i<l3){amount=arr3[i+=1];out+=''+(helper.link(amount, 'minus', {'remove': amount}));} } out+='</div></div><div class="item"><div class="itemLabel">Contents:</div><div class="itemContent" style="min-height: 175px;">';if(data.isBeakerLoaded){out+='<b>Volume: '+(data.beakerCurrentVolume)+'/'+(data.beakerMaxVolume)+' Units</b><br />';if(data.beakerContents.length){var arr4=data.beakerContents;if(arr4){var reagent,i=-1,l4=arr4.length-1;while(i<l4){reagent=arr4[i+=1];out+='<span class="highlight">'+(reagent.volume)+' units of '+(reagent.name)+'</span><br />';} } }else{out+='<span class="bad">Beaker Empty</span>';}}else{out+='<span class="average">No Beaker Loaded</span>';}out+='</div></div></div>';return out;
},
  chem_heater:function anonymous(data, config, helper
/**/) {
var out='<h2>Status</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Power:</div><div class="itemContent">'+(helper.link(data.isActive ? 'On' : 'Off', data.isActive ? 'power' : 'close', {'toggle_on' : 1}, data.isBeakerLoaded ? null : 'disabled'))+'</div></div><div class="item"><div class="itemLabel">Target:</div><div class="itemContent">'+(helper.link(data.targetTemp + 'K', 'pencil', {'adjust_temperature' : 'input'}))+'</div></div></div><h2>Beaker</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">'+(helper.link('Eject', 'eject', {'eject_beaker' : 1}, data.isBeakerLoaded ? null : 'disabled'))+'</div></div><div class="item"><div class="itemLabel">Contents:</div><div class="itemContent" style="min-height: 175px;">';if(data.isBeakerLoaded){out+='Temperature: '+(data.currentTemp)+'K<br />';if(data.beakerContents.length){var arr1=data.beakerContents;if(arr1){var reagent,i=-1,l1=arr1.length-1;while(i<l1){reagent=arr1[i+=1];out+='<span class="highlight">'+(reagent.volume)+' units of '+(reagent.name)+'</span><br />';} } }else{out+='<span class="bad">Beaker Empty</span>';}}else{out+='<span class="average">No Beaker Loaded</span>';}out+='</div></div></div>';return out;
},
  cryo:function anonymous(data, config, helper
/**/) {
var out='<h2>Occupant</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Occupant:</div><div class="itemContent">';if(data.hasOccupant){out+=''+(data.occupant.name);}else{out+='<span class="average">No Occupant</span>';}out+='</div></div>';if(data.hasOccupant){out+='<div class="item"><div class="itemLabel">State:</div><div class="itemContent">';if(data.occupant.stat == 0){out+='<span class="good">Conscious</span>';}else if(data.occupant.stat == 1){out+='<span class="average">Unconscious</span>';}else{out+='<span class="bad">Dead</span>';}out+='</div></div><div class="item"><div class="itemLabel">Temperature:</div><div class="itemContent">'+(helper.round(data.occupant.bodyTemperature))+' K</div></div>';}if(data.occupant.stat < 2){out+='<div class="item"><div class="itemLabel">Health:</div><div class="itemContent">';if(data.occupant.health >= 0){out+=''+(helper.bar(data.occupant.health, 0, data.occupant.maxHealth, 'good'));}else{out+=''+(helper.bar(data.occupant.health, 0, data.occupant.minHealth, 'average'));}out+=''+(helper.round(data.occupant.health))+'</div></div><div class="item"><div class="itemLabel">Brute:</div><div class="itemContent">'+(helper.bar(data.occupant.bruteLoss, 0, data.occupant.maxHealth, 'bad'))+(helper.round(data.occupant.bruteLoss))+'</div></div><div class="item"><div class="itemLabel">Respiratory:</div><div class="itemContent">'+(helper.bar(data.occupant.oxyLoss, 0, data.occupant.maxHealth, 'bad'))+(helper.round(data.occupant.oxyLoss))+'</div></div><div class="item"><div class="itemLabel">Toxin:</div><div class="itemContent">'+(helper.bar(data.occupant.toxLoss, 0, data.occupant.maxHealth, 'bad'))+(helper.round(data.occupant.toxLoss))+'</div></div><div class="item"><div class="itemLabel">Burn:</div><div class="itemContent">'+(helper.bar(data.occupant.fireLoss, 0, data.occupant.maxHealth, 'bad'))+(helper.round(data.occupant.fireLoss))+'</div></div>';}out+='</div><h2>Cell</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Power:</div><div class="itemContent">'+(helper.link('On', 'power', {'switchOn': 1}, data.isOperating ? 'selected' : null))+(helper.link('Off', 'close', {'switchOff': 1}, data.isOperating ? null : 'selected'))+'</div></div><div class="item"><div class="itemLabel">Temperature:</div><div class="itemContent"><span class="'+(data.cellTemperatureStatus)+'">'+(data.cellTemperature)+' K</span></div></div><div class="item"><div class="itemLabel">Door:</div><div class="itemContent">'+(helper.link('Open', 'unlocked', {'openCell' : 1}, data.isOpen ? 'disabled' : null))+(helper.link('Close', 'locked', {'closeCell' : 1}, data.isOpen ? null : 'disabled'))+'</div></div><div class="item"><div class="itemLabel">Eject:</div><div class="itemContent">'+(helper.link('Auto', 'eject', {'autoEject' : 1}, data.autoEject ? 'selected' : null))+(helper.link('Manual', 'pin-s', {'autoEject' : 0}, data.autoEject ? null : 'selected'))+'</div></div></div><h2>Beaker</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">'+(helper.link('Eject', 'eject', {'ejectBeaker' : 1}, data.isBeakerLoaded ? null : 'disabled'))+'</div></div><div class="item"><div class="itemLabel">Contents:</div><div class="itemContent">';if(data.isBeakerLoaded){if(data.beakerContents.length){var arr1=data.beakerContents;if(arr1){var reagent,i=-1,l1=arr1.length-1;while(i<l1){reagent=arr1[i+=1];out+='<span class="highlight">'+(reagent.volume)+' units of '+(reagent.name)+'</span><br />';} } }else{out+='<span class="bad">Beaker Empty</span>';}}else{out+='<span class="average">No Beaker Loaded</span>';}out+='</div></div></div>';return out;
},
  smes:function anonymous(data, config, helper
/**/) {
var out='<h2>Storage</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Stored Energy:</div><div class="itemContent">'+(helper.bar(data.capacityPercent, 0, 100, data.capacityPercent >= 50 ? 'good' : data.capacityPercent >= 15 ? 'average' : 'bad'))+'<div class="statusValue">'+(helper.round(data.capacityPercent))+'%</div></div></div></div><h2>Input</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Charge Mode:</div><div class="itemContent">'+(helper.link('Auto', 'refresh', {'input_attempt': 1}, data.inputAttempt ? 'selected' : null))+(helper.link('Off', 'close', {'input_attempt': 0}, data.inputAttempt ? null : 'selected'))+'&nbsp;';if(data.capacityPercent >= 99){out+='[<span class=\'good\'>Fully Charged</span>]';}else if(data.inputting){out+='[<span class=\'average\'>Charging</span>]';}else{out+='[<span class=\'bad\'>Not Charging</span>]';}out+='</div></div><div class="item"><div class="itemLabel">Input Setting:</div><div class="itemContent">'+(helper.bar(data.inputLevel, 0, data.inputLevelMax))+'&nbsp;'+(data.inputLevel)+' W<br class="clearBoth" />'+(helper.link('', 'fast-backward', {'set_input_level': '0'}, data.inputLevel ? null : 'selected'))+(helper.link('', 'backward', {'set_input_level': 'minus'}, data.inputLevel ? null : 'disabled'))+(helper.link('Set', 'pencil', {'set_input_level': 'custom'}, null))+(helper.link('', 'forward', {'set_input_level': 'plus'}, data.inputLevel == data.inputLevelMax ? 'disabled' : null))+(helper.link('', 'fast-forward', {'set_input_level': 'max'}, data.inputLevel == data.inputLevelMax ? 'selected' : null))+'</div></div><div class="item"><div class="itemLabel">Available:</div><div class="itemContent">'+(data.inputAvailable)+' W</div></div></div><h2>Output</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Charge Mode:</div><div class="itemContent">'+(helper.link('On', 'power-off', {'output_attempt': 1}, data.outputAttempt ? 'selected' : null))+(helper.link('Off', 'close', {'output_attempt': 0}, data.outputAttempt ? null : 'selected'))+'&nbsp;';if(data.outputting){out+='[<span class="good">Sending</span>]';}else if(data.charge > 0){out+='[<span class="average">Not Sending</span>]';}else{out+='[<span class="bad">No Charge</span>]';}out+='</div></div><div class="item"><div class="itemLabel">Output Setting:</div><div class="itemContent">'+(helper.bar(data.outputLevel, 0, data.outputLevelMax))+'&nbsp;'+(data.outputLevel)+' W<br class="clearBoth" />'+(helper.link('', 'fast-backward', {'set_output_level': '0'}, data.outputLevel ? null : 'selected'))+(helper.link('', 'backward', {'set_output_level': 'minus'}, data.outputLevel ? null : 'disabled'))+(helper.link('Set', 'pencil', {'set_output_level': 'custom'}, null))+(helper.link('', 'forward', {'set_output_level': 'plus'}, data.outputLevel == data.outputLevelMax ? 'disabled' : null))+(helper.link('', 'fast-forward', {'set_output_level': 'max'}, data.outputLevel == data.outputLevelMax ? 'selected' : null))+'</div></div><div class="item"><div class="itemLabel">Outputting:</div><div class="itemContent">'+(data.outputUsed)+' W</div></div></div>';return out;
},
  solar_control:function anonymous(data, config, helper
/**/) {
var out='<h2>Status</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Generated Power:</div><div class="itemContent">'+(data.generated)+' W</div></div><div class="item"><div class="itemLabel">Orientation:</div><div class="itemContent">'+(data.angle)+'&deg ('+(data.direction)+')'+(helper.link('15&deg', 'minus', {'rate_control': '1', 'cdir': '-15'}))+(helper.link('1&deg', 'minus', {'rate_control': '1', 'cdir': '-1'}))+(helper.link('1&deg', 'plus', {'rate_control': '1', 'cdir': '1'}))+(helper.link('15&deg', 'plus', {'rate_control': '1', 'cdir': '15'}))+'</div></div></div><h2>Tracking</h2><div class="statusDisplay"><div class="item"><div class=\'itemLabel\'>Tracker Mode:</div><div class="itemContent">'+(helper.link('Off', 'close', {'track': '0'}, (data.tracking_state == 0) ? 'selected' : ''))+(helper.link('Timed', 'clock', {'track': '1'}, (data.tracking_state == 1) ? 'selected' : ''));if(data.connected_tracker){out+=''+(helper.link('Auto', 'signal-diag', {'track': '2'}, (data.tracking_state == 2) ? 'selected' : ''));}else{out+=''+(helper.link('Auto', 'signal-diag', null, 'disabled'));}out+='</div></div><div class="item"><div class="itemLabel">Tracking Rate:</div><div class="itemContent">'+(data.tracking_rate)+' deg/h ('+(data.rotating_way)+')'+(helper.link('180&deg', 'minus', {'rate_control': '1', 'tdir': '-180'}))+(helper.link('30&deg', 'minus', {'rate_control': '1', 'tdir': '-30'}))+(helper.link('1&deg', 'minus', { 'rate_control': '1', 'tdir': '-1'}))+(helper.link('1&deg', 'plus', { 'rate_control': '1', 'tdir': '1'}))+(helper.link('30&deg', 'plus', { 'rate_control': '1', 'tdir': '30'}))+(helper.link('180&deg', 'plus', { 'rate_control': '1', 'tdir': '180'}))+'</div></div></div><h2>Devices</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Solar Tracker:</div><div class="itemContent">';if(data.connected_tracker){out+='<span class="good">Found</span>';}else{out+='<span class="bad">Not Found</span>';}out+='</div></div><div class="item"><div class="itemLabel">Solars Panels:</div><div class="itemContent"><span class="'+(data.connected_panels ? 'good' : 'bad')+'">'+(data.connected_panels)+' Connected</span></div></div><div class="item">'+(helper.link('', 'refresh', {'search_connected': '1'}))+'</div></div>';return out;
},
  space_heater:function anonymous(data, config, helper
/**/) {
var out='<h2>Status</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Power:</div><div class="itemContent">'+(helper.link('On',  'power', {'power': 1}, !data.on ? null : 'selected'))+(helper.link('Off', 'close', {'power': 0},  data.on ? null : 'selected'))+'</div></div><div class="item"><div class="itemLabel">Stored Energy:</div><div class="itemContent">';if(data.hasPowercell){out+=''+(helper.bar(data.powerLevel, 0, 100, 'good'))+'&nbsp;'+(data.powerLevel)+'%';if(data.open){out+='<br />'+(helper.link('Eject', 'eject', {'cellremove' : 1}, null));}}else{out+='No power cell loaded.';if(data.open){out+=''+(helper.link('Install', 'eject', {'cellinstall' : 1}, null ));}}out+='</div></div></div><h2>Thermostat</h2><div class="statusDisplay"><div class="item"><div class="itemLabel">Current Temp:</div><div class="itemContent">'+(data.currentTemp)+'&deg;C</div></div><div class="item"><div class="itemLabel">Target Temp:</div><div class="itemContent">'+(data.targetTemp)+'&deg;C';if(data.open){out+='<br />'+(helper.link('','seek-prev',{'temp': -20}, data.targetTemp > data.minTemp ? null : 'disabled'))+(helper.link('','triangle-1-w', {'temp':  -5}, data.targetTemp > data.minTemp ? null : 'disabled'))+(helper.link('Set', 'pencil',   {'temp': 'custom'}, null))+(helper.link('','triangle-1-e', {'temp':   5}, data.targetTemp < data.maxTemp ? null : 'disabled'))+(helper.link('','seek-next',{'temp':  20}, data.targetTemp < data.maxTemp ? null : 'disabled'));}out+='</div></div><div class="item"><div class="itemLabel">Operational Mode:</div><div class="itemContent">';if(data.open){out+=''+(helper.link('Heat', 'arrowthick-1-n',   {'mode' : 'heat'}, data.mode != "heat" ? null : 'selected'))+(helper.link('Cool', 'arrowthick-1-s',   {'mode' : 'cool'}, data.mode != "cool" ? null : 'selected'))+(helper.link('Auto', 'arrowthick-2-n-s', {'mode' : 'auto'}, (data.mode == "heat" || data.mode == "cool") ? null : 'selected'));}else{if(data.mode == "heat"){out+='Heat';}else if(data.mode == "cool"){out+='Cool';}else{out+='Auto';}}out+='</div></div></div>';return out;
},
  tanks:function anonymous(data, config, helper
/**/) {
var out='';if(data.maskConnected){out+='<div class="noticePlaceholder">The regulator is connected to a mask.</div>';}else{out+='<div class="notice">The regulator is not connected to a mask.</div>';}out+='<div class="item"><div class="itemLabel">Tank Pressure:</div><div class="itemContent">'+(helper.bar(data.tankPressure, 0, 1013, (data.tankPressure > 200) ? 'good' : ((data.tankPressure > 100) ? 'average' : 'bad')))+(data.tankPressure)+' kPa</div></div><div class="item"><div class="itemLabel">Release Pressure:</div><div class="itemContent">'+(helper.bar(data.releasePressure, data.minReleasePressure, data.maxReleasePressure))+(data.releasePressure)+' kPa</div></div><div class="item"><div class="itemLabel">Pressure Regulator:</div><div class="itemContent">'+(helper.link('Reset', 'refresh', {'dist_p': 'reset'}, (data.releasePressure != data.defaultReleasePressure) ? null : 'disabled'))+(helper.link('Min', 'minus', {'dist_p': 'min'}, (data.releasePressure > data.minReleasePressure) ? null : 'disabled'))+(helper.link('Set', 'pencil', {'dist_p': 'custom'}, null))+(helper.link('Max', 'plus', {'dist_p': 'max'}, (data.releasePressure < data.maxReleasePressure) ? null : 'disabled'))+'<br class="clearBoth" />'+(helper.link('Open', 'unlock', {'stat': 1}, data.maskConnected ? (data.valveOpen ? 'selected' : null) : 'disabled'))+(helper.link('Close', 'lock', {'stat': 1}, data.valveOpen ? null : 'selected'))+'</div></div>';return out;
} };}());