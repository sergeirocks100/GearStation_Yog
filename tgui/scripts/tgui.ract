<link rel='ractive' href='./components/resize.ract'>
<link rel='ractive' href='./components/titlebar.ract'>
<link rel='ractive' href='./components/warnings.ract'>

<script>
  import winset from './byond'
  import {drag, resize} from './dragresize'

component.exports = {
  components: {
    'ui-bar': require('./components/bar'),
    'ui-button': require('./components/button'),
    'ui-display': require('./components/display'),
    'ui-notice': require('./components/notice'),
    'ui-section': require('./components/section'),
    'ui-subdisplay': require('./components/subdisplay'),
  },
  events: {
    enter: require('ractive-events-keys').enter,
    space: require('ractive-events-keys').space,
  },
  transitions: {
    fade: require('ractive-transitions-fade'),
  },
  onconfig: function () {
    let requested  = this.get('config.interface')
    let interfaces = require('./interfaces/*', { mode: 'hash' })
    if (requested in interfaces) {
      this.components.interface = interfaces[requested] // Use the interface specified in the config...
    } else {
      this.components.interface = interfaces.error // ...unless it does not exist.
    }
  },
  oninit: function () {
    this.on('titlebar.drag', () => {
      this.toggle('drag')
      return false
    })
    this.on('resize.resize', () => {
      this.toggle('resize')
      return false
    })
    document.addEventListener('mousemove', (event) => {
      if (this.get('drag')) {
        drag(this, event)
      } else if (this.get('resize')) {
        resize(this, event)
      }
    })
    document.addEventListener('mouseup', (event) => {
      if (this.get('drag')) this.set('drag')
      if (this.get('resize')) this.get('resize')
      if (this.get('drag') || this.get('resize')) {
        this.set('x')
        this.set('y')
      }
    })
  },
  onrender: function () {
    this.observe('config.style', (newkey, oldkey, keypath) =>{ // Change style to match config.
      if(oldkey) {
        document.body.classList.remove(oldkey)
        this.el.classList.remove(oldkey)
      }
      if(newkey)
        document.body.classList.add(newkey)
        this.el.classList.add(newkey)
    })
  },
  oncomplete: function () {
    winset('mapwindow.map', 'focus', true) // Give focus back to the map.
  }
}
</script>

<titlebar>{{{config.title}}}</titlebar>
<main>
  <warnings/>
  <interface/>
</main>
<resize/>
